j
	 0  1  2  3  4
i
0	 0  1  1  1  1		j == i => 0
1	-1  0  1  1  1		j > i   Phía trên
2	-1 -1  0  1  1		j < i   Phía dưới
3	-1 -1 -1  0  1
4	-1 -1 -1 -1  0

//========== Xâu, chuỗi ===========

	C:	Xâu	Mảng kí tự:	char []

	C++: 	Chuỗi	thư viện 		string

//---- Cú pháp khai báo xâu:
			char <tên xâu>[<sl pt tối đa>];

			VD: char c[10];	//9 kí tự + 1 kí tự \0

		//	\0 là kí tự kết thúc xâu

+ Khởi tạo:	- trực tiếp - khởi tạo tất các giá trị còn lại là '\0'

		- lần lượt: Dùng cin	=> VD: cin>>c;	KQ: hello\0	Lưu ý: chỉ có 1 \0


	Cơ chế của cin:	Chỉ nhận kí tự không nhận khoảng trắng, xuống dòng.

	Cơ chế của gets:	Nhận kí tự và khoảng trắng cho đến khi gặp \n
						(Bỏ qua \n - lấy \n ra khỏi bnđ nhưng không giao cho biến)

				cong thanh\n

	Cơ chế chuyên sâu gets:
		
B1: Chạy vô bộ nhớ đệm kiểm tra:  	Nếu bộ nhớ đệm có phần tử	=> Lấy và giao cho biến
				Nếu bộ nhớ đệm rỗng	=> B2: yêu cầu nhập vào rồi quay lại B1


Lỗi trôi lệnh: 	Trôi lệnh nhập
Nguyên nhân:	Thừa bộ nhớ đệm
Giải pháp:	Xóa bộ nhớ đệm
		
		+ fflush(stdin):	Sai bản chất	rewind(stdin)
		+ while(getchar()!='\n');
			
		+cin.ignore();
		+cin.clear();


		Biểu hiện -> Nguyên nhân -> Giải pháp

___________________________________________________________________________


#include <iostream>
#define MAX 100
using namespace std;
void nhap(int a[MAX][MAX], int dong, int cot);
void xuat(int a[MAX][MAX], int dong, int cot);
void tong(int a[MAX][MAX], int dong, int cot);
void cau2(int a[MAX][MAX], int dong, int cot);
void tam_giac_pascal(int a[MAX][MAX], int dong, int cot);

void main()
{
	int a[MAX][MAX];
	int dong = 0;
	int cot = 0;
	do
	{
		cout << "Nhap dong: "; cin >> dong;
	} while (dong <= 0 || dong > MAX);
	do
	{
		cout << "Nhap cot: "; cin >> cot;
	} while (cot <= 0 || cot > MAX || dong!=cot);
	//---------------------------
	//nhap(a, dong, cot);
	//cau2(a, dong, cot);
	tam_giac_pascal(a, dong, cot);

	xuat(a, dong, cot);

	//tong(a, dong, cot);

}
void nhap(int a[MAX][MAX], int dong, int cot)
{
	cout << "\t\t===== Nhap =====" << endl;
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{
			cout << "Nhap pt a[" << i << "][" << j << "]: "; cin >> a[i][j];
		}
		cout << endl;
	}
}
void xuat(int a[MAX][MAX], int dong, int cot)
{
	cout << "\t\t===== Xuat =====" << endl;
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{
			if (a[i][j] != 0)
			{
				if (a[i][j] < 10)
				{
					cout << " ";
				}
				cout << a[i][j] << "   ";
			}
		}
		cout << endl;
	}
}
void tong(int a[MAX][MAX], int dong, int cot)
{
	int s = 0;
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{
			if (i == j)//thuộc đường chéo chính
			{
				if (a[i][j] % 2 != 0)//lẻ
				{
					s = s + a[i][j];
				}
			}
			if (i + j == dong - 1)//Thuộc đường chéo phụ
			{
				if (a[i][j] % 2 != 0)
				{
					s = s + a[i][j];
				}
			}
		}
	}
	cout << "S = " << s << endl;
}
void cau2(int a[MAX][MAX], int dong, int cot)
{
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{
			if (j == i)
			{
				a[i][j] = 0;
			}
			else if (j > i)
			{
				a[i][j] = 1;
			}
			else if (j < i)
			{
				a[i][j] = -1;
			}
		}
	}
}
void tam_giac_pascal(int a[MAX][MAX], int dong, int cot)
{
	for (int i = 0; i < dong; i++)
	{
		for (int j = 0; j < cot; j++)
		{
			if (j == i || j == 0)
			{
				a[i][j] = 1;
			}
			else if (j > i)
			{
				a[i][j] = 0;
			}
			else
			{
				a[i][j] = a[i - 1][j] + a[i - 1][j - 1];
			}
		}
	}
}