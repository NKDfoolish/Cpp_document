BTVN:
Code siêu mảng động thực hiện các chức năng sau:
1. Nhập
2. Xuất danh sách
3. Xóa pt lẻ
4. Dịch phải xoay vòng k lần  VD: 1 2 3 4, k = 3         => 2 3 4 1
5. Sắp xếp tăng các pt chẵn
____________________________________________________________________________
#include <iostream>
using namespace std;

void nhap(int* p, int n);
void xuat(int* p, int n);
void cap_phat_lai(int*& p, int ncu, int nmoi);
void them(int*& p, int& n, int vt, int x);
void xoa(int*& p, int& n, int vt);
void xoa_phan_tu_le(int*& p, int &n);
void dich_phai(int*& p, int& n);
void sap_xep_tang_cac_phan_tu_chan(int* &p, int &n);

void main()
{
	//---- setting ----
	int* p = NULL; int n = 0;
	bool kt_menu = true;
	//---- loadfile
	//--- play ----
	while (kt_menu == true)
	{
		system("cls");//clear screen	clrscr
		//---- Bảng điều khiển ---
		cout << "1. Nhap phan tu" << endl;
		cout << "2. Xuat danh sach" << endl;
		cout << "3. Them pt tai vi tri vt nhap tu ban phim" << endl;
		cout << "4. Xoa pt tai vi tri vt nhap tu ban phim" << endl;
		cout << "5. Xoa phan tu le" << endl;
		cout << "6. Dich phai" << endl;
		cout << "7. Sap xep cac phan tu chan tang dan" << endl;
		cout << "0. Thoat" << endl;
		//---- Điều hướng ----
		int lc;
		cout << "Nhap lua chon: "; cin >> lc;
		switch (lc)
		{
		case 1:
		{
			int sl; cout << "Nhap sl pt can them: "; cin >> sl;
			for (int i = 1; i <= sl; i++)
			{
				int x;//Lưu tạm dữ liệu do người dùng nhập vào
				cout << "Nhap pt thu " << i << ": "; cin >> x;
				//---- thêm cuối -----
				cap_phat_lai(p, n, n + 1);
				p[n++] = x;
			}

			break;
		}
		case 2:
		{
			xuat(p, n);
			system("pause");
			break;
		}
		case 3:
		{
			int vt, x;
			cout << "Nhap gia tri can them: "; cin >> x;
			cout << "Nhap vi tri can them: "; cin >> vt;
			them(p, n, vt, x);
			break;
		}
		case 4:
		{
			int vt;
			cout << "Nhap vi tri can xoa: "; cin >> vt;
			xoa(p, n, vt);
			break;
		}
		case 5:
		{
			xoa_phan_tu_le(p, n);
			break;
		}
		case 6:
		{
			dich_phai(p, n);
			break;
		}
		case 7:
		{
			sap_xep_tang_cac_phan_tu_chan(p, n);
			break;
		}
		case 0:
		{
			kt_menu = false;
			break;
		}
		}
	}
	//--- ghi file ----

}
void nhap(int* p, int n)
{
	cout << "\t\t==== Nhap ===" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "Nhap pt thu " << i << ": "; cin >> p[i];
	}
}
void xuat(int* p, int n)
{
	cout << "\t\t==== Xuat ===" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "Pt thu " << i << " la: " << p[i] << endl;
	}
}
void cap_phat_lai(int*& p, int ncu, int nmoi)//nmoi: số phòng(vùng nhớ) ở nhà mới
{
	//B1: tạm giữ đc nhà cũ
	int* tam = p;
	//B2: mua nhà mới
	p = new int[nmoi];
	//B3: dời đồ
	for (int i = 0; i < ncu; i++)//ncu: Số phòng ở nhà cũ mình sẽ dời qua nhà mới
	{
		p[i] = tam[i];
	}
	//B4: giải tỏa nhà cũ
	if (tam != NULL)
	{
		delete[] tam;
	}
}
void them(int*& p, int& n, int vt, int x)
{
	//B1: Nới rộng
	cap_phat_lai(p, n, n + 1);
	//B2: Thêm (Dời, chèn, tăng)
	for (int i = n; i > vt; i--)
	{
		p[i] = p[i - 1];
	}
	p[vt] = x;
	n++;
}
void xoa(int*& p, int& n, int vt)
{
	//B1: Xóa
	for (int i = vt; i < n - 1; i++)
	{
		p[i] = p[i + 1];
	}
	//xuat(p, 10);
	//B2: Thu hồi
	cap_phat_lai(p, n - 1, n - 1);
	n--;
}
void xoa_phan_tu_le(int* &p, int &n) {
	for (int i = 0; i < n; i++) {
		if (*(p + i) % 2 != 0) {
			xoa(p, n, i);
		}
	}
}
void dich_phai(int* &p, int &n) {
	int k; cout << "Nhap k: "; cin >> k;
	for (int i = 1; i <= k % n; i++) {
		them(p, n, 0, *(p + n - 1));
		n--;
	}
}
void sap_xep_tang_cac_phan_tu_chan(int* &p, int &n) {
	for (int i = 0; i < n - 1; i++) {
		if (p[i] % 2 == 0) {
			for (int j = i + 1; j < n; j++) {
				if (p[j] % 2 == 0) {
					if (p[j] < p[i]) {
						swap(p[j], p[i]);
					}
				}				
			}
		}
		
	}
}