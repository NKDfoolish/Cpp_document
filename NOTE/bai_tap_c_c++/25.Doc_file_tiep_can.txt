============== BT lý thuyết ==============
1. trình bày đường dẫn tương đối, và đường dẫn tuyệt đối.
================================================================
- Đường dẫn tuyệt đối còn được gọi là đường dẫn đầy đủ. Vị trí đầy đủ của tệp hoặc thư mục trong hệ thống tệp máy tính. Khác với đường dẫn tương đối, một đường dẫn tuyệt đối bắt đầu từ thư mục gốc (hoặc ký tự ổ đĩa) và tiếp tục lên hệ thống phân cấp thư mục cho đến khi đạt được tệp hoặc thư mục cụ thể. Cú pháp của các đường dẫn tuyệt đối khác nhau tùy theo hệ điều hành. Trên Microsoft Windows, chúng bắt đầu bằng ký tự ổ đĩa và sử dụng dấu gạch chéo ngược để tách các tên thư mục. Đường dẫn tuyệt đối trên macOS và Linux thiếu ký tự ổ đĩa và sử dụng dấu gạch chéo phía trước làm dấu phân tách thư mục. 
Ví dụ: Windows: C:\Users\Wiki\www\web\images\computer.jpg 
       macOS: /Users/Wiki/www/web/images/computer.jpg 
       Linux: /home/Wiki/www/web/images/computer.jpg 
Trên internet, các URL tuân theo các quy ước của Unix về việc sử dụng dấu gạch chép trước để chia các tập tin và thư mục trên các server.
- Đường dẫn tương đối là đường dẫn phân cấp định vị tệp hoặc thư mục trên hệ thống tệp bắt đầu từ thư mục hiện tại. Đường dẫn tương đối khác với đường dẫn tuyệt đối, định vị file hoặc thư mục bắt đầu từ thư mục gốc của hệ thống tệp.

Nếu thư mục hiện tại là C:\Windows, thì đường dẫn liên quan đến tệp thực thi cho trò chơi Solitaire, nằm trong thư mục hiện tại, chỉ đơn giản là tên của tệp thực thi – sol.exe. Nếu thư mục hiện tại là C: \ Windows \ System, thì đường dẫn liên quan đến Solitaire là.. \ sol.exe. Trong hệ thống tệp UNIX, cú pháp cho các đường dẫn tương đối giống nhau ngoại trừ việc nó sử dụng dấu gạch chéo lên phía trước thay vì dấu gạch chéo ngược để phân biệt các cấp trong hệ thống phân cấp hệ thống tệp.
==========================================================================
2. Nhận xét Đúng SAi:
a) Đọc file sau khi được đóng file, thì lần đọc file sau con trỏ sẽ trỏ về đầu
Đúng
b) Ghi file sau khi được đóng file, thì kết quả ghi file lần sau sẽ ghi tiếp vào file kết quả
Sai - sẽ bị ghi đè ( xóa cũ ghi mới )
============================= bài tập ======================
1. đọc các số nguyên từ file input.txt biết
+ dòng đầu tiên là 1 số nguyên biểu diễn số lượng các số nguyên cần đọc
+ dòng thứ 2 là 1 dãy các số nguyên cần đọc
VD: intput.txt
5
1 4 7 8 9
(các bạn tự tạo)
=== yêu cầu ===
Tìm phần tử lớn nhất trong mảng số nguyên đó và ghi vào file input.txt
-----------------------------
2. đọc các số nguyên từ file input.txt
biết: chỉ có 1 dòng duy nhất chứa các số nguyên
VD: input.txt
12 345 1 7 12 1
==== yêu cầu ==
tìm các phần tử là số amstrong trong mảng số nguyên đó và ghi vào file ouput.txt	
--------------------------------
3. Đọc các số nguyên từ file INPUT.TXT biết
+ Chỉ có 1 dòng duy nhất chứa các số nguyên và mỗi số nguyên cách nhau bởi 1 dấu phẩy
VD: INPUT.TXT
1,3,6,9

=== Yêu cầu ===
- File UCLN.TXT lưu 1 số nguyên là ước số chung lớn nhất của tất cả các phần tử của mảng
- File BCNN.TXT lưu 1 số nguyên là bội chung nhỏ nhất của tất cả các phần tử của mảng

* Gợi ý: 
- Nghiên cứu cách dùng hàm seekg() hoặc suy nghĩ cách để giải quyết vướng mắc bài toán
==================================================================================================
#include <iostream>
#include <fstream>
#define MAX 100
using namespace std;

void load_file_lv1(int a[], int& n);
void xuat(int a[], int n);
void phan_tu_lon_nhat(int a[], int n);
void load_file_lv2(int a[], int& n);
void xuat_so_armstrong(int a[], int n);
void load_file_lv3(int a[], int& n);
void UCLN_BCNN_cua_day_so(int a[], int n);

int main() {
	int a[MAX]; int n = 0;
	load_file_lv3(a, n);
	xuat(a, n);
	UCLN_BCNN_cua_day_so(a, n);
	return 0;
}
void load_file_lv1(int a[], int& n) {
	ifstream fi;
	fi.open("D:\\UIT\\Dream\\BeCoding\\visual studio 2022\\Becoding\\input.txt", ios_base::in);

	if (fi.fail()) {
		cout << "Mo khong duoc! " << endl;
		system("pause");
		return;
	}

	fi >> n;
	for (int i = 0; i < n; i++)
	{
		fi >> a[i];
	}

	fi.close();
}
void xuat(int a[], int n) {
	cout << "\t\t========== Xuat ==========\n";
	for (int i = 0; i < n; i++)
	{
		cout << a[i] << " ";
	}
}
void phan_tu_lon_nhat(int a[], int n) {
	int max = a[0];
	for (int i = 1; i < n; i++)
	{
		if (a[i]>max)
		{
			max = a[i];
		}
	}
	cout << "\nPhan tu max : " << max;
}
void load_file_lv2(int a[], int& n) {
	ifstream fi;
	fi.open("D:\\UIT\\Dream\\BeCoding\\visual studio 2022\\Becoding\\input.txt", ios_base::in);

	if (fi.fail()) {
		cout << "Mo khong duoc! " << endl;
		system("pause");
		return;
	}

	while (fi.eof() == false)
	{
		fi >> a[n++];
	}

	fi.close();
}
int CountDigit(int n)
{
	int count = 0;
	while (n > 0)
	{
		n /= 10;
		++count;
	}
	return count;
}
bool IsArmstrong(int n)
{
	int numDigit = CountDigit(n);
	int tmp = n, sum = 0, last;
	while (tmp > 0)
	{
		last = tmp % 10; // lấy chữ số cuối cùng
		tmp /= 10;       // bỏ chữ số cuối cùng
		sum += pow(last, numDigit);
	}
	if (sum == n)
		return true;
	return false;
}
void xuat_so_armstrong(int a[], int n) {
	cout << "\n\t\t ================ Amrstrong ============\n";
	for (int i = 0; i < n; i++)
	{
		if (IsArmstrong(a[i]) == true) {
			cout << a[i] << " ";
		}
	}
}
void load_file_lv3(int a[], int& n) {
	ifstream fi;
	fi.open("D:\\UIT\\Dream\\BeCoding\\visual studio 2022\\Becoding\\input.txt", ios_base::in);

	if (fi.fail()) {
		cout << "Mo khong duoc! " << endl;
		system("pause");
		return;
	}

	while (fi.eof() == false)
	{
		fi >> a[n++];
		fi.ignore();
	}

	fi.close();
}
int UCLN(int a, int b) {
	while (a!=b)
	{
		(a > b) ? a = a - b :b = b - a;
	}
	return a;
}
int BCNN(int a, int b) {
	return ((a * b) / UCLN(a,b));
}
void UCLN_BCNN_cua_day_so(int a[], int n) {
	int ucln = UCLN(a[0], a[1]);
	int bcnn = BCNN(a[0], a[1]);
	for (int i = 2; i < n; i++)
	{
		ucln = UCLN(ucln, a[i]);
		bcnn = BCNN(bcnn, a[i]);
	}
	cout << "\nUCLN: " << ucln;
	cout << "\nBCNN: " << bcnn;
}