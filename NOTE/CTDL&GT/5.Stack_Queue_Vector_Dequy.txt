//==== STACK, QUEUE ====


Stack: Ngăn xếp	LIFO	(Vào sau ra trước)

	+ isEmpty()
	+ push()			1	2	3	4
				ptop
					=> push() cuối
					=> pop() cuối
					=> top() cuối
	+ pop()
	+ top()

				4	3	2	1
				ptop
					=> push() đầu
					=> pop() đầu
					=> top() đầu


Queue: Hàng đợi	FIFO	(Vào trước ra trước)

	+ isEmpty()
	+ push()
	+ pop()
	+ front()
	+ back()

===================== Một số hàm hỗ trợ trên Vector =====================

1/ resize:
- Hàm này có 2 dạng:
	-  resize(<số lượng>): Cấp phát mảng với số lượng phần tử cụ thể cho trước. 

                   	+ Mặc định khi cấp phát với resize là các phần tử đều mang giá trị mặc định ban đầu là 0(giống hàm calloc bên C)
                   	+ Nếu mảng chưa từng được tạo thì sẽ tạo mảng với số lượng cụ thể đó. 
                   	+ Nếu mảng đã được tạo mà tiếp tục resize thì kích thước của mảng sẽ co lại hay dãn ra so với mảng ban đầu. 
                   	+ Nếu là co lại thì lần lượt các phần tử cuối sẽ bị xóa, nếu là dãn ra thì các phần tử lúc đầu vẫn tiếp tục tồn tại 

	- resize(<số lượng>, <giá trị mặc định>):  

	+ Cấp phát mảng với số lượng phần tử cụ thể cho trước - với giá trị của các phần tử là giá trị mặc định. 
                  	+ Mảng được tạo mới nếu chưa có, nếu đã có rồi mảng sẽ co lại hoặc dãn ra so với mảng ban đầu. 

2/ at(<chỉ số index>): Truy xuất đến phần tử có chỉ số index trong vector.
vd: 
vector a;
cout << a.at(2); // Xuất ra phần tử tại vị trí 2 trong vector. Tương đương như: a[2]. Dùng cách nào cũng được. 
 
3/ size(): Trả về kích thước hiện tại của vector (số lượng các phần tử đang chứa trong vector).

4/ push_back(<Phần tử có kiểu dữ liệu bất kỳ>): Thực hiện đưa phần tử vào cuối vector.

5/ pop_back(): Xóa phần tử cuối cùng trong vector.
 
6/ front(): Trả về phần tử đầu tiên của mảng.

7/ back(): Trả về phần tử cuối cùng của mảng.

8/ capacity(): Trả về kích thước thực sự vector đang lưu trữ (các phần tử).

9/ max_size(): Trả về kích thước tối đa có thể chứa các phần tử của các container.

10/ begin(): Trả về 1 iterator trỏ đến phần tử đầu tiên trong vector (giống pHead bên List)

11/ end(): Trả về 1 iterator trỏ đến phần tử cuối cùng trong vector (giống pTail bên List)

12/ erase: Xóa phần tử trong vector.
- Hàm này có 2 dạng:
	+ Dạng 1: erase(<Tên vector>.begin() + <số nguyên x>): Xóa phần tử tại vị trí x trong mảng (vị trí trong mảng bắt đầu từ 0). 

	+ Dạng 2: erase(<Tên vector>.begin() + <số nguyên x>, <Tên vector>.begin() + <số nguyên y>): Xóa các phần tử của mảng từ vị trí x cho đến vị trí y - 1.

Lưu ý cả 2 trường hợp trên: Nếu vị trí truyền vào không hợp lệ thì chương trình sẽ bị lỗi.

13/ clear(): Xóa tất cả các phần tử hiện có trong vector, vector sau khi thực hiện câu lệnh này sẽ trở thành vector rỗng.

14/ insert: Thêm phần tử vào trong vector.
- Hàm này có 4 dạng:
	+ Dạng 1: insert(<Tên vector>.begin() + <số nguyên x>, <giá trị cần chèn>): Chèn giá trị vào vị trí x trong mảng.
	+ Dạng 2: insert(<Tên vector>.begin() + <số nguyên x>, <số lần chèn y>, <giá trị cần chèn>): Chèn y lần giá trị vào vị trí x trong mảng.
	+ Dạng 3: insert(<Tên vector>.begin() + <số nguyên x>, <Tên vector a>.begin() + <số nguyên y>, <Tên vector a>.begin() + <số nguyên z>): 
                    ---> Lấy các phần tử từ vector a bắt đầu lấy từ vị trí y cho đến vị trí z - 1 và chèn vào vị trí x của vector hiện tại. 
	+ Dạng 4: insert(<Tên vector>.begin() + <số nguyên x>, <Tên mảng a>  + <số nguyên y>, <Tên mảng a>  + <số nguyên z>): 
                   ----> Lấy các phần tử lấy từ mảng a bắt đầu lấy từ vị trí y đến vị trí z - 1 và chèn vào vị trí x của vector hiện tại.

15/ swap(<vector x>): Hoán đổi các phần tử của vector hiện tại & vector x cho nhau.

//======================= Đệ quy ================================

Hàm: gọi lại chính nó

void hello()
{
	cout<<hello<<endll;
	hello();
}

+ Bài toán nào đệ quy giải được, vòng lặp giải được => Vòng lặp ( Khử đệ quy)
+ Có những bài đệ quy giải được, vòng lặp không giải được (Quy hồi)

----- Các dạng đệ quy -----
+ Đệ quy tuyến tính:		Trong 1 hàm có 1 lời gọi chính nó thực thi

+ Đệ quy nhị phân		Trong 1 hàm có 2 lời gọi chính nó thực thi		(fibonacy)
+ Đệ quy hỗ tương		Trong hàm A gọi hàm B rồi hàm B gọi hàm A
+ Đệ quy phi tuyến		Lời gọi chính nó đặt trong vòng lặp



Cấu trúc:
	+ Phần dừng
	+ Phần đệ quy


VD1:	Tính giai thừa của n.		
						n! = n * (n - 1)!

	n = 5		5! = 5*4*3*2*1		5! = 5*4!
			4! = 4*3*2*1		4! = 4*3!
			3! = 3*2*1			3! = 3*2!
			2! = 2*1			2! = 2*1!
			1! = 1			1! = 1

	=> Công thức đệ quy:	f(n)	Dừng khi n == 1	và trả về 1
					f(n) = n * f(n -1)



Bài 2. Cho số nguyên dương n. Tính 2 x 4 x 6 x...x 2n

						tich(n) = 2*n * tich(n-1)
	n = 5
			tich(5) = 10*8*6*4*2		tich(5) = 2*5 * tich(4)
			tich(4) = 8*6*4*2		tich(4) = 2*4 * tich(3)
			tich(3) = 6*4*2		tich(3) = 2*3 * tich(2)
			tich(2) = 4*2		tich(2) = 2*2 * tich(1)
			tich(1) = 2			tich(1) = 2

	=>	Công thức đệ quy:		f(n)	Dừng khi n == 1	và trả về 2
						f(n) = 2*n * f(n-1)
==============================================================================
#include <iostream>
using namespace std;

struct node {
	int data;
	node* pnext;
};
typedef struct node node;

typedef struct stack {
	node* ptop = NULL;
}stack;

//============ Nguyen mau ham =============
bool is_Empty(stack s);
node* khoi_tao_node(int x);
void push(stack& s, int x);
void pop(stack& s);
int top(stack s);
//=========================================

int main() {
	stack s;
	while (true)
	{
		system("cls");
		cout << "1. Push" << endl;
		cout << "2. Xuat Stack" << endl;
		cout << "3. Pop" << endl;
		cout << "4. Top" << endl;
		cout << "Nhap lc: "; int lc; cin >> lc;
		switch (lc)
		{
		case 1: 
		{
			int sl; cout << "Nhap so luong phan tu can them: "; cin >> sl;
			for (int i = 0; i < sl; i++)
			{
				int x;
				cout << "Nhap pt thu " << i + 1 << ": ";
				cin >> x;
				push(s, x);
			}
			break;
		}
		case 2:
		{
			while (is_Empty(s) == false)
			{
				cout << top(s) << endl;
				pop(s);
			}
			system("pause");
			break;
		}
		case 3:
		{
			pop(s);
			break;
		}
		case 4:
		{
			cout << top(s) << endl;
			system("pause");
			break;
		}
		}
	}

	return 0;
}
bool is_Empty(stack s) {
	return (s.ptop == NULL);
}
node* khoi_tao_node(int x) {
	node* p = new node;
	p->data = x;
	p->pnext = NULL;
	return p;
}
void push(stack& s, int x) {
	node* p = khoi_tao_node(x);
	if (is_Empty(s) == true) {
		s.ptop = p;
	}
	else {
		p->pnext = s.ptop;
		s.ptop = p;
	}
}
void pop(stack& s) {
	if (is_Empty(s) == false) {
		node* temp = s.ptop;
		s.ptop = s.ptop->pnext;
		delete temp;
	}
}
int top(stack s) {
	if (is_Empty(s) == false) {
		return s.ptop->data;
	}
}
=============================================================================
#include <iostream>
using namespace std;

struct node {
	int data;
	node* pnext;
};
typedef struct node node;

typedef struct queue {
	node* pfront = NULL;
	node* pback = NULL;
}queue;

//================ Nguyen mau ham ====================
bool is_Empty(queue q);
node* khoi_tao_node(int x);
void push(queue& q, int x);
void pop(queue& q);
int front(queue q);
int back(queue q);
//====================================================

int main() {
	queue q;

	while (true)
	{
		system("cls");
		cout << "1. Push" << endl;
		cout << "2. Xuat Queue" << endl;
		cout << "3. Pop" << endl;
		cout << "4. Front" << endl;
		cout << "5. Back" << endl;
		int lc; cout << "Nhap lua chon: "; cin >> lc;
		switch (lc)
		{
		case 1:
		{
			int sl; cout << "Nhap so luong phan tu can them: "; cin >> sl;
			for (int i = 0; i < sl; i++)
			{
				int x;
				cout << "Nhap pt thu " << i + 1 << ": ";
				cin >> x;
				push(q, x);
			}
			break;
		}
		case 2:
		{
			while (is_Empty(q) == false)
			{
				cout << back(q) << endl;
				pop(q);
			}
			system("pause");
			break;
		}
		case 3:
		{
			pop(q);
			break;
		}
		case 4:
		{
			cout << front(q) << endl;
			system("pause");
			break;
		}
		case 5:
		{
			cout << back(q) << endl;
			system("pause");
			break;
		}
		}
	}
	return 0;
}
bool is_Empty(queue q) {
	return q.pfront == NULL;
}
node* khoi_tao_node(int x) {
	node* p = new node;
	p->data = x;
	p->pnext = NULL;
	return p;
}
void push(queue& q, int x) {
	node* p = khoi_tao_node(x);
	if (is_Empty(q) == true) {
		q.pfront = q.pback = p;
	}
	else {
		q.pback->pnext = p;
		q.pback = p;
	}
}
void pop(queue& q) {
	if (q.pfront == q.pback && q.pfront != NULL) {
		delete q.pfront;
		q.pfront = q.pback = NULL;
	}
	for (node* k = q.pfront; k != NULL; k = k->pnext) {
		if (k->pnext->pnext == NULL) {
			delete q.pback;
			k->pnext = NULL;
			q.pback = k;
		}
	}
}
int front(queue q) {
	return q.pfront->data;
}
int back(queue q) {
	return q.pback->data;
}