#include <iostream>
using namespace std;
//=================================
struct node
{
	//-- data ---
	int data;
	//-- pointer --
	node *pnext;
};
typedef struct node node;

typedef struct dslk
{
	node* phead = NULL;
	node* ptail = NULL;
}dslk;

//============================
node* khoi_tao_node(int x);
void them_cuoi(dslk& ds, int x);
//-----------------------------------
void xuat_ds(dslk ds);
//-----------------------------------
void them_dau(dslk& ds, int x);
//----------------------------------
void xoa_dau(dslk& ds);
//-----------------------------------
void xoa_cuoi(dslk& ds);

void main()
{
	dslk ds;
	
	while (true)
	{
		system("cls");
		cout << "1. Nhap" << endl;
		cout << "2. Xuat ds" << endl;
		cout << "3. Them dau" << endl;
		cout << "4. Xoa dau" << endl;
		cout << "5. Xoa cuoi" << endl;
		cout << "Nhap lc: "; int lc; cin >> lc;
		switch (lc)
		{
		case 1:
		{
			int sl; cout << "Nhap sl pt can them: "; cin >> sl;
			for (int i = 1; i <= sl; i++)
			{
				int x;
				cout << "Nhap pt thu " << i << ": "; cin >> x;
				them_cuoi(ds, x);
			}
			break;
		}
		case 2:
		{
			xuat_ds(ds);
			system("pause");
			break;
		}
		case 3:
		{
			int x;
			cout << "Nhap gia tri can them: "; cin >> x;
			them_dau(ds, x);
			break;
		}
		case 4:
		{
			xoa_dau(ds);
			break;
		}
		case 5:
		{
			xoa_cuoi(ds);
			break;
		}
		}
	}
}
node* khoi_tao_node(int x)
{
	node* p = new node;
	p->data = x;
	p->pnext = NULL;
	return p;
}
void them_cuoi(dslk& ds,int x)
{
	node* p = khoi_tao_node(x);
	if (ds.phead == NULL)//Rỗng
	{
		ds.phead = ds.ptail = p;
	}
	else if (ds.phead != NULL)//1 pt, n pt
	{
		//B1: ptail liên kết pt cần thêm
		ds.ptail->pnext = p;
		//B2: cập nhật ptail
		ds.ptail = p;
	}
}
void xuat_ds(dslk ds)
{
	int j = 1;
	for (node* k = ds.phead; k != NULL; k = k->pnext)
	{
		//------ pt dang xét: k
		cout << "Pt thu " << j++ << " la: " << k->data << endl;
	}
}
void them_dau(dslk& ds,int x)
{
	node* p = khoi_tao_node(x);
	if (ds.phead == NULL)//Rỗng
	{
		ds.phead = ds.ptail = p;
	}
	else if (ds.phead != NULL)//1pt, n pt
	{
		//B1: p lk phead
		p->pnext = ds.phead;
		//B2: cập nhật phead
		ds.phead = p;
	}
}
void xoa_dau(dslk &ds)
{
	if (ds.phead == ds.ptail && ds.phead != NULL)//1 pt
	{
		//B1: giải phóng
		delete ds.phead;
		//B2: cập nhật phead, ptail
		ds.phead = ds.ptail = NULL;
	}
	else if (ds.phead != ds.ptail)//n pt
	{
		//B1: Tạm giữ phead
		node* tam = ds.phead;
		//B2: cập nhật phead về pt thứ 2
		ds.phead = ds.phead->pnext;
		//B3: giải phóng tạm
		delete tam;
	}
	
}
void xoa_cuoi(dslk &ds)
{
	if (ds.phead == ds.ptail && ds.phead != NULL)//1 pt
	{
		//B1: giải phóng
		delete ds.ptail;
		//B2: cập nhật phead, ptail
		ds.phead = ds.ptail = NULL;
	}
	else if (ds.phead != ds.ptail)//n pt
	{
		for (node* k = ds.phead; k != NULL; k = k->pnext)
		{
			if (k->pnext->pnext == NULL)//B1: Tìm vt áp cuối
			{
				//B2: Xóa cuối
				
				//B2.1: Giải phóng pt cuối
				delete ds.ptail;
				//B2.2: k lk với NULL => k là pt cuối
				k->pnext = NULL;
				//B2.3: cập nhật ptail
				ds.ptail = k;

				return;
			}
		}
		
	}
}