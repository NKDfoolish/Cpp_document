
Thêm đầu:
	+ DS rỗng:	đầu = cuối = p

	+ DS có 1 pt:	B1: p lk phead
			B2: cập nhật phead

	+ DS có n pt:	Tương tự TH có 1 pt

Xóa đầu:
	+ Ds rỗng: 	Không có gì để xóa

	+ Ds có 1 pt:	B1: Giải phóng
			B2: Cập nhật phead, ptail về NULL

	+ Ds có n pt:	B1: Cho tạm giữ pt cần xóa
			B2: Cập nhật phead về pt thứ 2
			B3: giải phóng tạm
Xóa cuối:
	+ Ds rỗng:	ko có gì để xóa

	+ Ds có 1 pt:	B1: Giải phóng
			B2: Cập nhật phead, ptail về NULL

	+ Ds có n pt:	B1: Tìm vt áp cuối
			B2.1: Giải phóng ptail
			B2.2: k lk NULL
			B2.3: cập nhật ptail

//================ Xóa tại vt =====================

+ DS rỗng	có gì đâu mà xóa

+ Ds có 1 pt	tự đúng			Dùng h theo k - for khuyết

+ Ds có n pt:		k->data==vt	Dùng h  theo k - đảm bảo 100% vt không nằm ở đầu

	- vt ở giữa		Xóa tại vt <=> xóa tại k	=> Xóa sau h
			B1: k là pt cần xóa
			B2: h lk pt sau k
			B3: giải phóng k
			B4: Lùi k	:	tránh vô định, tránh sót pt

	- vt ở đầu		đảm bảo 100% vt không nằm ở đầu

	- vt ở pt thứ 2	Tự đúng

	- vt ở cuối		Sau khi xoá sau h, hỏi h đang ở đâu. Nếu h ở cuối => Vừa xóa cuối
							=> Cập nhật lại ptail

	- vt ở áp cuối	Tự đúng
	- 2 vt cách xa	Tự đúng
	- 2 vt liên tiếp	Tự đúng - Có lùi k
_______________________________________________________________________
#include <iostream>
using namespace std;
//=================================
struct node
{
	//-- data ---
	int data;
	//-- pointer --
	node* pnext;
};
typedef struct node node;

typedef struct dslk
{
	node* phead = NULL;
	node* ptail = NULL;
}dslk;

//============================
node* khoi_tao_node(int x);
void them_cuoi(dslk& ds, int x);
//-----------------------------------
void xuat_ds(dslk ds);
//-----------------------------------
void them_dau(dslk& ds, int x);
//----------------------------------
void xoa_dau(dslk& ds);
//-----------------------------------
void xoa_cuoi(dslk& ds);
//-----------------------------------
void xoa_tai_vt(dslk& ds, int vt);

void main()
{
	dslk ds;

	while (true)
	{
		system("cls");
		cout << "1. Nhap" << endl;
		cout << "2. Xuat ds" << endl;
		cout << "3. Them dau" << endl;
		cout << "4. Xoa dau" << endl;
		cout << "5. Xoa cuoi" << endl;
		cout << "6. Xoa tai vt" << endl;
		cout << "Nhap lc: "; int lc; cin >> lc;
		switch (lc)
		{
		case 1:
		{
			int sl; cout << "Nhap sl pt can them: "; cin >> sl;
			for (int i = 1; i <= sl; i++)
			{
				int x;
				cout << "Nhap pt thu " << i << ": "; cin >> x;
				them_cuoi(ds, x);
			}
			break;
		}
		case 2:
		{
			xuat_ds(ds);
			system("pause");
			break;
		}
		case 3:
		{
			int x;
			cout << "Nhap gia tri can them: "; cin >> x;
			them_dau(ds, x);
			break;
		}
		case 4:
		{
			xoa_dau(ds);
			break;
		}
		case 5:
		{
			xoa_cuoi(ds);
			break;
		}
		case 6:
		{
			int vt;
			cout << "Nhap vt can xoa: "; cin >> vt;
			xoa_tai_vt(ds, vt);
			break;
		}
		}
	}
}
node* khoi_tao_node(int x)
{
	node* p = new node;
	p->data = x;
	p->pnext = NULL;
	return p;
}
void them_cuoi(dslk& ds, int x)
{
	node* p = khoi_tao_node(x);
	if (ds.phead == NULL)//Rỗng
	{
		ds.phead = ds.ptail = p;
	}
	else if (ds.phead != NULL)//1 pt, n pt
	{
		//B1: ptail liên kết pt cần thêm
		ds.ptail->pnext = p;
		//B2: cập nhật ptail
		ds.ptail = p;
	}
}
void xuat_ds(dslk ds)
{
	int j = 1;
	for (node* k = ds.phead; k != NULL; k = k->pnext)
	{
		//------ pt dang xét: k
		cout << "Pt thu " << j++ << " la: " << k->data << endl;
	}
}
void them_dau(dslk& ds, int x)
{
	node* p = khoi_tao_node(x);
	if (ds.phead == NULL)//DS rỗng
	{
		ds.phead = ds.ptail = p;
	}
	else if (ds.phead != NULL)//1 pt, n pt
	{
		//B1: p lk phead
		p->pnext = ds.phead;
		//B2: cập nhật phead
		ds.phead = p;
	}
}
void xoa_dau(dslk& ds)
{
	if (ds.phead == ds.ptail && ds.phead != NULL)
	{
		//B1: Giải phóng
		delete ds.phead;
		//B2: Cập nhật về NULL
		ds.phead = ds.ptail = NULL;
	}
	else if (ds.phead!=NULL)
	{
		//B1: cho tạm giữ pt đầu
		node* tam = ds.phead;
		//B2: cập nhật phead về pt thứ 2
		ds.phead = ds.phead->pnext;
		//B3: giải phóng tạm
		delete tam;
	}
}
void xoa_cuoi(dslk& ds)
{
	if (ds.phead == ds.ptail && ds.phead != NULL)
	{
		//B1: Giải phóng
		delete ds.phead;
		//B2: Cập nhật về NULL
		ds.phead = ds.ptail = NULL;
	}
	else if (ds.phead != NULL)//n pt
	{
		
		for (node* k = ds.phead; k != NULL; k = k->pnext)
		{
			if (k->pnext->pnext == NULL)//B1: Tìm vt áp cuối
			{
				//B2.1 giải ptail
				delete ds.ptail;
				//B2.2 k lk NULL
				k->pnext = NULL;
				//B2.3 cập nhật ptail
				ds.ptail = k;

				return;
			}
		}
	}
}
void xoa_tai_vt(dslk &ds,int vt)
{
	if (ds.phead != NULL)//n pt
	{
		//=== ĐẢM BẢO 100% VT KHÔNG NẰM Ở ĐẦU TRƯỚC KHI VÀO h theo k ======
		while (ds.phead->data == vt)
		{
			//-- Xoá đầu ---
			node* tam = ds.phead;
			ds.phead = ds.phead->pnext;
			delete tam;
			if (ds.phead == NULL)//ds rỗng
			{
				ds.ptail = NULL;//Cập nhật ptail về NULL
				return;
			}
		}
		//				NULL
		//				phead
		//			ptail

		//=== Kỹ thuật h theo k - chỉ có tác dụng cho các pt từ thứ tự 2,3,4,5...===
		node* h = NULL;

		for (node* k = ds.phead; k != NULL; k = k->pnext)
		{
			//--- Xoá tại vt => Xóa k => Xóa sau h ---
			if (k->data == vt)
			{
				//B1: h lk pt sau k
				h->pnext = k->pnext;
				//B2: Giải phóng k
				delete k;
				//B3: Lùi k //Tránh vô định, tránh sót phần tử
				k = h;

				//--- h đang ở đâu ---
				if (h->pnext == NULL)//h đang ở cuối => Vừa xóa cuối
				{
					ds.ptail = h;//Cập nhật ptail
					return;
				}
			}
			//---- h theo k ----
			h = k;
		}
	}
}